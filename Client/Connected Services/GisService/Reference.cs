//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.GisService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Weather", Namespace="http://schemas.datacontract.org/2004/07/DBLayer")]
    [System.SerializableAttribute()]
    public partial class Weather : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DayTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptoinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdWeatherField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NightTempField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CityId {
            get {
                return this.CityIdField;
            }
            set {
                if ((this.CityIdField.Equals(value) != true)) {
                    this.CityIdField = value;
                    this.RaisePropertyChanged("CityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Day {
            get {
                return this.DayField;
            }
            set {
                if ((this.DayField.Equals(value) != true)) {
                    this.DayField = value;
                    this.RaisePropertyChanged("Day");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DayTemp {
            get {
                return this.DayTempField;
            }
            set {
                if ((this.DayTempField.Equals(value) != true)) {
                    this.DayTempField = value;
                    this.RaisePropertyChanged("DayTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descriptoin {
            get {
                return this.DescriptoinField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptoinField, value) != true)) {
                    this.DescriptoinField = value;
                    this.RaisePropertyChanged("Descriptoin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdWeather {
            get {
                return this.IdWeatherField;
            }
            set {
                if ((this.IdWeatherField.Equals(value) != true)) {
                    this.IdWeatherField = value;
                    this.RaisePropertyChanged("IdWeather");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NightTemp {
            get {
                return this.NightTempField;
            }
            set {
                if ((this.NightTempField.Equals(value) != true)) {
                    this.NightTempField = value;
                    this.RaisePropertyChanged("NightTemp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/DBLayer")]
    [System.SerializableAttribute()]
    public partial class City : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GisService.IGisService")]
    public interface IGisService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGisService/GetTomorrowWeather", ReplyAction="http://tempuri.org/IGisService/GetTomorrowWeatherResponse")]
        Client.GisService.Weather GetTomorrowWeather(int cityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGisService/GetTomorrowWeather", ReplyAction="http://tempuri.org/IGisService/GetTomorrowWeatherResponse")]
        System.Threading.Tasks.Task<Client.GisService.Weather> GetTomorrowWeatherAsync(int cityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGisService/GetCities", ReplyAction="http://tempuri.org/IGisService/GetCitiesResponse")]
        Client.GisService.City[] GetCities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGisService/GetCities", ReplyAction="http://tempuri.org/IGisService/GetCitiesResponse")]
        System.Threading.Tasks.Task<Client.GisService.City[]> GetCitiesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGisServiceChannel : Client.GisService.IGisService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GisServiceClient : System.ServiceModel.ClientBase<Client.GisService.IGisService>, Client.GisService.IGisService {
        
        public GisServiceClient() {
        }
        
        public GisServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GisServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GisServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GisServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.GisService.Weather GetTomorrowWeather(int cityId) {
            return base.Channel.GetTomorrowWeather(cityId);
        }
        
        public System.Threading.Tasks.Task<Client.GisService.Weather> GetTomorrowWeatherAsync(int cityId) {
            return base.Channel.GetTomorrowWeatherAsync(cityId);
        }
        
        public Client.GisService.City[] GetCities() {
            return base.Channel.GetCities();
        }
        
        public System.Threading.Tasks.Task<Client.GisService.City[]> GetCitiesAsync() {
            return base.Channel.GetCitiesAsync();
        }
    }
}
